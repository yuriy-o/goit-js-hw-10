{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,8BCKA,MAAMC,EAAO,CACXC,MAAOC,SAASC,cAAc,oBAC9BC,GAAIF,SAASC,cAAc,iBAC3BE,IAAKH,SAASC,cAAc,kBAI9B,IAAIG,EAAa,GA2EjB,SAASC,IACPP,EAAKI,GAAGI,UAAY,GACpBR,EAAKK,IAAIG,UAAY,EACvB,CA5EAR,EAAKC,MAAMQ,iBAAiB,QAASC,EAAAC,EAAA,EAErC,SAAiBC,GAMf,GALAA,EAAEC,iBAEFP,EAAaM,EAAEE,OAAOC,MAAMC,OAC5BC,QAAQC,IAAIZ,GAEO,KAAfA,EAEF,YADAC,KDrB2BY,ECyBdb,EDxBRc,MACL,uCAAuCD,oDAEtCE,MAAKC,IACJ,IAAKA,EAAKC,GACR,MAAM,IAAIC,MAAMF,EAAKG,QAIvB,OADAR,QAAQC,IAAI,gBAAiBI,GACtBA,EAAKI,MAAI,IAEjBL,MAAKM,IACJV,QAAQC,IAAI,gBAAiBS,GAEtBA,KAERC,OAAMC,IACLZ,QAAQC,IAAI,sCAAuCW,GAEnD/B,EAAAgC,OAAOC,QAAQ,4CACRF,MCIgBR,MAAKW,IAG9BzB,IAEIyB,EAAQC,OAAS,GACnBnC,EAAAgC,OAAOI,KAAK,8DAIVF,EAAQC,QAAU,GAAKD,EAAQC,QAAU,GAoCjD,SAAyBE,GACvB,MAAMC,EAASD,EACZE,KACCL,GACE,0DAC0BA,EAAQM,MAAMC,qBAAqBP,EAAQb,KAAKqB,4CACpDR,EAAQb,KAAKqB,yBAGtCC,KAAK,IAERzC,EAAKI,GAAGsC,mBAAmB,YAAaN,EAC1C,CA/CMO,CAAgBX,GAIdA,EAAQC,OAAS,GAOzB,SAAuBE,GACrB,MAAMC,EAASD,EAAUE,KACvBL,GACE,0DAC4BA,EAAQM,MAAMC,qBACxCP,EAAQb,KAAKqB,wBAEXR,EAAQb,KAAKqB,4FAGqCR,EAAQY,6EAE9DZ,EAAQa,+EAEgDC,OAAOC,OAC/Df,EAAQgB,sCAMZhD,EAAKK,IAAIqC,mBAAmB,YAAaN,EAC3C,CA5BMa,CAAcjB,EAEhB,ID3CG,IAAwBb,CC6C/B,GApCuB","sources":["src/fetchCountries.js","src/index.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nexport function fetchCountries(name) {\n  return fetch(\n    `https://restcountries.com/v3.1/name/${name}?fields=name,capital,population,flags,languages`\n  )\n    .then(resp => {\n      if (!resp.ok) {\n        throw new Error(resp.status);\n      }\n\n      console.log('then#1 → resp', resp);\n      return resp.json();\n    })\n    .then(data => {\n      console.log('then#2 → data', data);\n\n      return data;\n    })\n    .catch(error => {\n      console.log('catch → Додаткова помилка в консоль', error);\n\n      Notify.failure('Oops, there is no country with that name');\n      return error;\n    });\n}\n","import { fetchCountries } from './fetchCountries';\nimport debounce from 'lodash.debounce';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport './css/styles.css';\n\nconst refs = {\n  input: document.querySelector('input#search-box'),\n  ul: document.querySelector('.country-list'),\n  div: document.querySelector('.country-info'),\n};\n\nconst DEBOUNCE_DELAY = 300;\nlet inputValue = '';\n\nrefs.input.addEventListener('input', debounce(onInput, DEBOUNCE_DELAY));\n\nfunction onInput(e) {\n  e.preventDefault();\n\n  inputValue = e.target.value.trim(); //без зайвих пробілів\n  console.log(inputValue);\n\n  if (inputValue === '') {\n    clear();\n    return;\n  }\n\n  fetchCountries(inputValue).then(country => {\n    // console.log('country.length', country.length); //Скільки країн введено в інпут\n\n    clear();\n\n    if (country.length > 10) {\n      Notify.info('Too many matches found. Please enter a more specific name.');\n      return;\n    }\n\n    if (country.length >= 2 && country.length <= 10) {\n      createCountries(country);\n      return;\n    }\n\n    if (country.length < 2) {\n      createCountry(country);\n      return;\n    }\n  });\n}\n\nfunction createCountry(countries) {\n  const markup = countries.map(\n    country =>\n      `<div class=\"country\">\n    <img class=\"flag-icon\" src=\"${country.flags.svg}\" alt=\"Flag of ${\n        country.name.official\n      }\" >\n    <h1>${country.name.official}</h1>\n</div>\n<div> \n    <p class=\"text\"><span class=\"caption\">Capital:</span> ${country.capital}</p>\n    <p class=\"text\"><span class=\"caption\">Population:</span> ${\n      country.population\n    }</p>\n    <p class=\"text\"><span class=\"caption\">Languages:</span> ${Object.values(\n      country.languages\n    )}.join(', ')</p>\n</div>`\n  );\n  // .join(''); //При умовах завдання тут виводиться одна країна, тому join можна прибрати\n\n  refs.div.insertAdjacentHTML('beforeend', markup);\n}\n\nfunction createCountries(countries) {\n  const markup = countries\n    .map(\n      country =>\n        `<div class=\"country\">\n    <img class=\"flag-icon\" src=\"${country.flags.svg}\" alt=\"Flag of ${country.name.official}\" >\n    <p class=\"country-name\">${country.name.official}</p>\n</div>`\n    )\n    .join('');\n\n  refs.ul.insertAdjacentHTML('beforeend', markup);\n}\n\nfunction clear() {\n  refs.ul.innerHTML = '';\n  refs.div.innerHTML = '';\n}\nfunction Error() {\n  clear();\n  Notify.failure('Oops, there is no country with that name');\n}\n"],"names":["$iQIUW","parcelRequire","$1f0dc3b9307be026$var$refs","input","document","querySelector","ul","div","$1f0dc3b9307be026$var$inputValue","$1f0dc3b9307be026$var$clear","innerHTML","addEventListener","$parcel$interopDefault","$50Kfe","e","preventDefault","target","value","trim","console","log","name","fetch","then","resp","ok","Error","status","json","data","catch","error","Notify","failure","country","length","info","countries","markup","map","flags","svg","official","join","insertAdjacentHTML","$1f0dc3b9307be026$var$createCountries","capital","population","Object","values","languages","$1f0dc3b9307be026$var$createCountry"],"version":3,"file":"index.d1c799a3.js.map"}